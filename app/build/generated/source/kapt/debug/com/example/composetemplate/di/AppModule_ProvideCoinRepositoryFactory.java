// Generated by Dagger (https://dagger.dev).
package com.example.composetemplate.di;

import com.example.composetemplate.data.remote.CoinService;
import com.example.composetemplate.domain.repository.CoinRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideCoinRepositoryFactory implements Factory<CoinRepository> {
  private final Provider<CoinService> coinServiceProvider;

  public AppModule_ProvideCoinRepositoryFactory(Provider<CoinService> coinServiceProvider) {
    this.coinServiceProvider = coinServiceProvider;
  }

  @Override
  public CoinRepository get() {
    return provideCoinRepository(coinServiceProvider.get());
  }

  public static AppModule_ProvideCoinRepositoryFactory create(
      Provider<CoinService> coinServiceProvider) {
    return new AppModule_ProvideCoinRepositoryFactory(coinServiceProvider);
  }

  public static CoinRepository provideCoinRepository(CoinService coinService) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideCoinRepository(coinService));
  }
}
