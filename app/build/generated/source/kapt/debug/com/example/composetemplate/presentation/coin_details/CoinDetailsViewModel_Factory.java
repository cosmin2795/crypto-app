// Generated by Dagger (https://dagger.dev).
package com.example.composetemplate.presentation.coin_details;

import com.example.composetemplate.domain.usecase.get_coin.GetCoinDetailsUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CoinDetailsViewModel_Factory implements Factory<CoinDetailsViewModel> {
  private final Provider<GetCoinDetailsUseCase> getCoinDetailsUseCaseProvider;

  public CoinDetailsViewModel_Factory(
      Provider<GetCoinDetailsUseCase> getCoinDetailsUseCaseProvider) {
    this.getCoinDetailsUseCaseProvider = getCoinDetailsUseCaseProvider;
  }

  @Override
  public CoinDetailsViewModel get() {
    return newInstance(getCoinDetailsUseCaseProvider.get());
  }

  public static CoinDetailsViewModel_Factory create(
      Provider<GetCoinDetailsUseCase> getCoinDetailsUseCaseProvider) {
    return new CoinDetailsViewModel_Factory(getCoinDetailsUseCaseProvider);
  }

  public static CoinDetailsViewModel newInstance(GetCoinDetailsUseCase getCoinDetailsUseCase) {
    return new CoinDetailsViewModel(getCoinDetailsUseCase);
  }
}
